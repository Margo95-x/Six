"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–¥–∞–∫—à–Ω Telegram –±–æ—Ç –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: webhook + aiohttp + PostgreSQL + Memory cache
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Render.com, —Å–æ–≤–º–µ—Å—Ç–∏–º —Å aiogram 2.x
"""


import asyncio
import logging
import os
from datetime import datetime
from typing import Optional, List, Dict, Any, Tuple
from contextlib import asynccontextmanager
from dataclasses import dataclass
import asyncpg
from aiohttp import web, ClientSession
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command, CommandStart
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
import re
from functools import wraps
from collections import defaultdict
import time

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

class Config:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"""
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    DATABASE_URL = os.getenv("DATABASE_URL")
    
    # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    TARGET_CHAT_ID = int(os.getenv("TARGET_CHAT_ID", "-1002827106973"))
    MODERATION_CHAT_ID = int(os.getenv("MODERATION_CHAT_ID", "0"))
    
    # Web –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", "https://your-app.onrender.com")
    WEBHOOK_PATH = "/webhook"
    WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
    PORT = int(os.getenv("PORT", "10000"))
    
    # –ë–∏–∑–Ω–µ—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    GROUP_LINK = os.getenv("GROUP_LINK", "https://t.me/your_group")
    EXAMPLE_URL = os.getenv("EXAMPLE_URL", "https://example.com")
    DEFAULT_AD_LIMIT = 4
    RATE_LIMIT_WINDOW = 60
    RATE_LIMIT_MAX_REQUESTS = 10
    
    # Database pool –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    DB_MIN_SIZE = 2
    DB_MAX_SIZE = 8
    DB_COMMAND_TIMEOUT = 30
    
    @classmethod
    def validate(cls):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if not cls.BOT_TOKEN:
            raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        if not cls.DATABASE_URL:
            raise ValueError("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# ==================== –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ====================

@dataclass
class UserAd:
    """–ú–æ–¥–µ–ª—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    message_id: int
    message_url: str
    topic_name: str
    id: Optional[int] = None
    created_at: Optional[datetime] = None

@dataclass
class TopicInfo:
    """–ú–æ–¥–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–º–µ"""
    name: str
    id: int

@dataclass 
class ValidationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
    is_valid: bool
    error_message: str = ""

# ==================== –°–û–°–¢–û–Ø–ù–ò–Ø FSM ====================

class AdStates(StatesGroup):
    choosing_language = State()
    main_menu = State()
    choosing_topic = State() 
    writing_ad = State()
    my_ads = State()
    editing_ad = State()

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–ï–ú ====================

TOPICS: Dict[str, TopicInfo] = {
    "topic_1": TopicInfo("üíº –†–∞–±–æ—Ç–∞", 27),
    "topic_2": TopicInfo("üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", 28),
    "topic_3": TopicInfo("üöó –ê–≤—Ç–æ", 29),
    "topic_4": TopicInfo("üõçÔ∏è –¢–æ–≤–∞—Ä—ã", 30),
    "topic_5": TopicInfo("üí° –£—Å–ª—É–≥–∏", 31),
    "topic_6": TopicInfo("üìö –û–±—É—á–µ–Ω–∏–µ", 32),
}

# ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ====================

bot: Bot = None
dp: Dispatcher = None
router: Router = None  # –î–û–ë–ê–í–õ–ï–ù–û –¥–ª—è aiogram 3.x
db_pool: asyncpg.Pool = None

# Rate limiting –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
rate_limiter = defaultdict(list)
memory_cache = {}

# ==================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[logging.StreamHandler()]
    )
    logging.getLogger('aiogram').setLevel(logging.WARNING)
    logging.getLogger('aiohttp').setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

# ==================== –î–ï–ö–û–†–ê–¢–û–†–´ ====================

def rate_limit(max_requests: int = Config.RATE_LIMIT_MAX_REQUESTS, 
               window: int = Config.RATE_LIMIT_WINDOW):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è rate limiting"""
    def decorator(func):
        @wraps(func)
        async def wrapper(message_or_query, *args, **kwargs):
            user_id = message_or_query.from_user.id
            
            now = time.time()
            requests = rate_limiter[user_id]
            
            requests[:] = [req_time for req_time in requests if now - req_time < window]
            
            if len(requests) >= max_requests:
                if hasattr(message_or_query, 'answer'):
                    await message_or_query.answer("‚è± –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
                else:
                    await message_or_query.reply("‚è± –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            requests.append(now)
            return await func(message_or_query, *args, **kwargs)
        return wrapper
    return decorator

def ban_check(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞"""
    @wraps(func)
    async def wrapper(message_or_query, *args, **kwargs):
        user_id = message_or_query.from_user.id
        if await is_user_banned(user_id):
            if hasattr(message_or_query, 'answer'):
                await message_or_query.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.", show_alert=True)
            else:
                await message_or_query.reply("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.")
            return
        return await func(message_or_query, *args, **kwargs)
    return wrapper

# ==================== –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –ò –ë–î (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ====================

class CacheService:
    """–°–µ—Ä–≤–∏—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏"""
    
    @staticmethod
    async def get(key: str) -> Optional[Any]:
        cache_data = memory_cache.get(key)
        if cache_data:
            value, expire_time = cache_data
            if time.time() < expire_time:
                return value
            else:
                memory_cache.pop(key, None)
        return None
    
    @staticmethod
    async def set(key: str, value: Any, ttl: int = 300) -> bool:
        expire_time = time.time() + ttl
        memory_cache[key] = (value, expire_time)
        return True
    
    @staticmethod
    async def delete(key: str) -> bool:
        memory_cache.pop(key, None)
        return True

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

@asynccontextmanager
async def get_db_connection():
    """Context manager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
    async with db_pool.acquire() as connection:
        try:
            yield connection
        except Exception as e:
            logger.error(f"Database error: {e}")
            raise

class DatabaseService:
    """–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    async def init_database():
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        global db_pool
        
        Config.validate()
        
        try:
            db_pool = await asyncpg.create_pool(
                Config.DATABASE_URL,
                min_size=Config.DB_MIN_SIZE,
                max_size=Config.DB_MAX_SIZE,
                command_timeout=Config.DB_COMMAND_TIMEOUT
            )
            
            async with get_db_connection() as conn:
                # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
                await conn.execute("""
                    CREATE TABLE IF NOT EXISTS user_ads (
                        id SERIAL PRIMARY KEY,
                        user_id BIGINT NOT NULL,
                        message_id BIGINT NOT NULL UNIQUE,
                        message_url TEXT NOT NULL,
                        topic_name TEXT NOT NULL,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                await conn.execute("""
                    CREATE TABLE IF NOT EXISTS banned_users (
                        user_id BIGINT PRIMARY KEY,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                await conn.execute("""
                    CREATE TABLE IF NOT EXISTS user_limits (
                        user_id BIGINT PRIMARY KEY,
                        ad_limit INTEGER NOT NULL DEFAULT 4,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
                indexes = [
                    "CREATE INDEX IF NOT EXISTS idx_user_ads_user_id ON user_ads(user_id)",
                    "CREATE INDEX IF NOT EXISTS idx_user_ads_message_id ON user_ads(message_id)",
                    "CREATE INDEX IF NOT EXISTS idx_user_ads_created_at ON user_ads(created_at DESC)",
                ]
                
                for index_sql in indexes:
                    try:
                        await conn.execute(index_sql)
                    except Exception as e:
                        if "already exists" not in str(e):
                            logger.warning(f"Index creation warning: {e}")
            
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            raise
    
    @staticmethod
    async def add_user_ad(user_ad: UserAd) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with get_db_connection() as conn:
                await conn.execute(
                    """INSERT INTO user_ads (user_id, message_id, message_url, topic_name) 
                       VALUES ($1, $2, $3, $4)""",
                    user_ad.user_id, user_ad.message_id, user_ad.message_url, user_ad.topic_name
                )
                
                # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
                await CacheService.delete(f"user_ads:{user_ad.user_id}")
                await CacheService.delete(f"user_ad_count:{user_ad.user_id}")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            return False
    
    @staticmethod
    async def get_user_ads(user_id: int) -> List[Tuple[int, str, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = f"user_ads:{user_id}"
        cached = await CacheService.get(cache_key)
        if cached:
            return cached
        
        try:
            async with get_db_connection() as conn:
                rows = await conn.fetch(
                    """SELECT message_id, message_url, topic_name 
                       FROM user_ads WHERE user_id = $1 
                       ORDER BY created_at DESC""",
                    user_id
                )
                result = [(row['message_id'], row['message_url'], row['topic_name']) for row in rows]
                await CacheService.set(cache_key, result, 300)
                return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
            return []
    
    @staticmethod
    async def get_user_ads_with_counts(user_id: int) -> List[Tuple[int, str, str, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–µ–º–∞–º"""
        ads = await DatabaseService.get_user_ads(user_id)
        
        topic_counts = defaultdict(int)
        result = []
        
        for message_id, message_url, topic_name in ads:
            topic_counts[topic_name] += 1
            topic_display = f"{topic_name} {topic_counts[topic_name]}"
            result.append((message_id, message_url, topic_display, topic_name))
        
        return result
    
    @staticmethod
    async def get_ad_by_message_id(message_id: int) -> Optional[Tuple[int, int, str, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ message_id —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = f"ad:{message_id}"
        cached = await CacheService.get(cache_key)
        if cached:
            return tuple(cached)
        
        try:
            async with get_db_connection() as conn:
                row = await conn.fetchrow(
                    """SELECT user_id, message_id, message_url, topic_name 
                       FROM user_ads WHERE message_id = $1""",
                    message_id
                )
                if row:
                    result = (row['user_id'], row['message_id'], row['message_url'], row['topic_name'])
                    await CacheService.set(cache_key, result, 600)
                    return result
                return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            return None
    
    @staticmethod
    async def delete_user_ad(message_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
        try:
            async with get_db_connection() as conn:
                # –ü–æ–ª—É—á–∞–µ–º user_id –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞
                row = await conn.fetchrow(
                    "SELECT user_id FROM user_ads WHERE message_id = $1", message_id
                )
                
                if row:
                    user_id = row['user_id']
                    await conn.execute(
                        "DELETE FROM user_ads WHERE message_id = $1", message_id
                    )
                    
                    # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
                    await CacheService.delete(f"user_ads:{user_id}")
                    await CacheService.delete(f"user_ad_count:{user_id}")
                    await CacheService.delete(f"ad:{message_id}")
                    return True
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            return False
    
    @staticmethod
    async def get_user_ad_count(user_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = f"user_ad_count:{user_id}"
        cached = await CacheService.get(cache_key)
        if cached is not None:
            return cached
        
        try:
            async with get_db_connection() as conn:
                result = await conn.fetchval(
                    "SELECT COUNT(*) FROM user_ads WHERE user_id = $1", user_id
                )
                count = result if result else 0
                await CacheService.set(cache_key, count, 60)
                return count
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
            return 0
    
    @staticmethod
    async def ban_user(user_id: int) -> bool:
        """–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with get_db_connection() as conn:
                await conn.execute(
                    """INSERT INTO banned_users (user_id) 
                       VALUES ($1) ON CONFLICT (user_id) DO NOTHING""",
                    user_id
                )
                await CacheService.delete(f"banned:{user_id}")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    @staticmethod
    async def unban_user(user_id: int) -> bool:
        """–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with get_db_connection() as conn:
                await conn.execute(
                    "DELETE FROM banned_users WHERE user_id = $1", user_id
                )
                await CacheService.delete(f"banned:{user_id}")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False

# ==================== –í–ê–õ–ò–î–ê–¶–ò–Ø ====================

class ValidationService:
    """–°–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def validate_message_text(text: str) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not text or not text.strip():
            return ValidationResult(False, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        
        if len(text) > 4000:
            return ValidationResult(False, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ @username
        if '@' in text:
            return ValidationResult(False, "‚ùå @username –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è, –º—ã —Å–∞–º–∏ –≤—Å—Ç–∞–≤–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—Å.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ URL
        if re.search(r'https?://', text, re.IGNORECASE):
            return ValidationResult(False, "‚ùå –°—Å—ã–ª–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è, –º—ã —Å–∞–º–∏ –≤—Å—Ç–∞–≤–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—Å.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ö—ç—à—Ç–µ–≥–∏
        if '#' in text:
            return ValidationResult(False, "‚ùå –•—ç—à—Ç–µ–≥–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è, –º—ã —Å–∞–º–∏ –≤—Å—Ç–∞–≤–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—Å.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–æ–º–µ–Ω—ã
        domain_pattern = r'\b[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.([a-zA-Z]{2,})\b'
        if re.search(domain_pattern, text):
            return ValidationResult(False, "‚ùå –°–∞–π—Ç—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è, –º—ã —Å–∞–º–∏ –≤—Å—Ç–∞–≤–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—Å.")
        
        return ValidationResult(True)

# ==================== –£–¢–ò–õ–ò–¢–´ ====================

async def is_user_banned(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    cache_key = f"banned:{user_id}"
    cached = await CacheService.get(cache_key)
    if cached is not None:
        return cached
    
    try:
        async with get_db_connection() as conn:
            result = await conn.fetchval(
                "SELECT 1 FROM banned_users WHERE user_id = $1", user_id
            )
            is_banned = result is not None
            await CacheService.set(cache_key, is_banned, 300)
            return is_banned
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞: {e}")
        return False

async def get_user_limit(user_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    cache_key = f"user_limit:{user_id}"
    cached = await CacheService.get(cache_key)
    if cached is not None:
        return cached
    
    try:
        async with get_db_connection() as conn:
            result = await conn.fetchval(
                "SELECT ad_limit FROM user_limits WHERE user_id = $1", user_id
            )
            limit = result if result else Config.DEFAULT_AD_LIMIT
            await CacheService.set(cache_key, limit, 600)
            return limit
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞: {e}")
        return Config.DEFAULT_AD_LIMIT

async def set_user_limit(user_id: int, limit: int):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with get_db_connection() as conn:
            await conn.execute(
                """INSERT INTO user_limits (user_id, ad_limit) 
                   VALUES ($1, $2) 
                   ON CONFLICT (user_id) 
                   DO UPDATE SET ad_limit = $2, updated_at = CURRENT_TIMESTAMP""",
                user_id, limit
            )
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
            await CacheService.delete(f"user_limit:{user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞: {e}")

async def notify_user(user_id: int, message: str) -> bool:
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await bot.send_message(chat_id=user_id, text=message)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================

def get_language_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
            InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")
        ]
    ])

def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="create_ad"),
            InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="my_ads")
        ],
        [InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É", url=Config.GROUP_LINK)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_language")]
    ])

def get_topics_keyboard() -> InlineKeyboardMarkup:
    buttons = []
    topic_items = list(TOPICS.items())
    
    for i in range(0, len(topic_items), 2):
        row = []
        topic_key, topic_data = topic_items[i]
        row.append(InlineKeyboardButton(
            text=topic_data.name, 
            callback_data=topic_key
        ))
        
        if i + 1 < len(topic_items):
            topic_key2, topic_data2 = topic_items[i + 1]
            row.append(InlineKeyboardButton(
                text=topic_data2.name, 
                callback_data=topic_key2
            ))
        
        buttons.append(row)
    
    buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò AIOGRAM 3.X ====================

@router.message(CommandStart())
@rate_limit()
async def start_handler(message: Message, state: FSMContext):
    """–°—Ç–∞—Ä—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    if message.chat.id == Config.TARGET_CHAT_ID:
        return
    
    if await is_user_banned(message.from_user.id):
        await message.reply("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.")
        return
    
    await message.reply(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:",
        reply_markup=get_language_keyboard()
    )
    await state.set_state(AdStates.choosing_language)

@router.callback_query(F.data == "lang_ru")
@rate_limit()
@ban_check
async def language_ru_handler(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )
    await state.set_state(AdStates.main_menu)
    await callback.answer()

@router.callback_query(F.data == "lang_en")
@rate_limit()
async def language_en_handler(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await callback.answer("üöß English version coming soon!", show_alert=True)

@router.callback_query(F.data == "create_ad")
@rate_limit()
@ban_check
async def create_ad_handler(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "üìù –í –∫–∞–∫—É—é —Ç–µ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å?",
        reply_markup=get_topics_keyboard()
    )
    await state.set_state(AdStates.choosing_topic)
    await callback.answer()

@router.callback_query(F.data == "my_ads")
@rate_limit()
@ban_check
async def my_ads_handler(callback: CallbackQuery, state: FSMContext):
    """–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    # ads = await DatabaseService.get_user_ads(user_id)  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ
    # user_limit = await get_user_limit(user_id)
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞:
    await callback.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π", show_alert=True)
    return

@router.callback_query(F.data.in_(list(TOPICS.keys())), AdStates.choosing_topic)
@rate_limit()
@ban_check
async def topic_handler(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–µ–º—ã"""
    topic_key = callback.data
    
    await state.update_data(selected_topic=topic_key)
    
    topic_name = TOPICS[topic_key].name
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìñ –ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è", url=Config.EXAMPLE_URL)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_topics")]
    ])
    
    await callback.message.edit_text(
        f"‚úçÔ∏è –¢–µ–º–∞: {topic_name}\n\n–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:",
        reply_markup=keyboard
    )
    await state.set_state(AdStates.writing_ad)
    await callback.answer()

@router.message(AdStates.writing_ad, F.content_type == "text")
@rate_limit()
@ban_check
async def ad_text_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    if message.chat.id == Config.TARGET_CHAT_ID:
        return
    
    user_data = await state.get_data()
    selected_topic = user_data.get("selected_topic")
    
    if not selected_topic or selected_topic not in TOPICS:
        await message.reply("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        await state.clear()
        return
    
    # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à—É –ª–æ–≥–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    await message.reply("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! (–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞)")
    await state.clear()

# ==================== –ù–ê–í–ò–ì–ê–¶–ò–Ø ====================

@router.callback_query(F.data == "back_to_language")
async def back_to_language_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞"""
    await callback.message.edit_text(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:",
        reply_markup=get_language_keyboard()
    )
    await state.set_state(AdStates.choosing_language)
    await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )
    await state.set_state(AdStates.main_menu)
    await callback.answer()

@router.callback_query(F.data == "back_to_topics")
async def back_to_topics_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º"""
    await callback.message.edit_text(
        "üìù –í –∫–∞–∫—É—é —Ç–µ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å?",
        reply_markup=get_topics_keyboard()
    )
    await state.set_state(AdStates.choosing_topic)
    await callback.answer()

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ó–ê–ü–£–°–ö ====================

async def init_database():
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î"""
    # global db_pool
    # Config.validate()
    # db_pool = await asyncpg.create_pool(Config.DATABASE_URL, ...)
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)")

async def is_user_banned(user_id: int) -> bool:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞"""
    return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    global bot, dp, router
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    Config.validate()
    setup_logging()
    
    bot = Bot(token=Config.BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    router = Router()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
    dp.include_router(router)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    await init_database()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
    await bot.set_my_commands([
        BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    ])
    
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    # Webhook —Ä–µ–∂–∏–º –¥–ª—è Render.com
    if Config.WEBHOOK_HOST and "onrender.com" in Config.WEBHOOK_HOST:
        app = web.Application()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
        webhook_requests_handler = SimpleRequestHandler(
            dispatcher=dp,
            bot=bot,
        )
        webhook_requests_handler.register(app, path=Config.WEBHOOK_PATH)
        setup_application(app, dp, bot=bot)
        
        # Health check
        async def health(request):
            return web.json_response({"status": "ok"})
        app.router.add_get('/health', health)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
        await bot.set_webhook(Config.WEBHOOK_URL)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {Config.WEBHOOK_URL}")
        
        # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', Config.PORT)
        await site.start()
        logger.info(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {Config.PORT}")
        
        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∂–∏–≤—ã–º
        try:
            await asyncio.Future()  # run forever
        finally:
            await bot.delete_webhook()
            await runner.cleanup()
    else:
        # Polling —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...")
        await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())